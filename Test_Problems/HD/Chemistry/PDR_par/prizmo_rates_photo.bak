module prizmo_rates_photo
contains

  ! **************************
  subroutine compute_rates_photo(n, Tgas, jflux)
    use prizmo_commons
    use prizmo_self_shielding
    implicit none
    real*8,intent(in)::n(nmols)
    real*8,intent(in)::Tgas
    real*8,intent(in)::jflux(nphoto)

    !!BEGIN_RATES_PHOTO

    !!END_RATES_PHOTO

  end subroutine compute_rates_photo

  ! *************************
  ! compute rate reaction, 1/s
  function integrate_rate_photo(jflux, idx) result(k)
    use prizmo_commons
    implicit none
    real*8,intent(in)::jflux(nphoto)
    integer,intent(in)::idx
    integer::i
    real*8::k, f0, f1, x0, x1

    k = sum(Jflux(:) * xsecs_trapz(:, idx)) / 2d0
    k = k / hplanck_eV

    return

    !k = 0d0  ! eV
    !f0 = xsecs(1, idx) * jflux(1) * inv_energy_grid(1)
    !x0 = energy_grid(1)  ! eV
    !do i=2,nphoto
    !   f1 = xsecs(i, idx) * jflux(i) * inv_energy_grid(i)
    !   x1 = energy_grid(i)
    !   k = k + 0.5 * (f0 + f1) * (x1 - x0)
    !   f0 = f1
    !   x0 = x1
    !end do

    ! convert to 1/s
    !k = k / hplanck_eV

  end function integrate_rate_photo


  ! **************************
  ! G0 as the ratio betwenn the current integral of jflux
  ! over the Draine energy interval scaled by the integral of the
  ! corresponding Draine flux (6, 13.6eV)
  ! NOTE: this is for rates, hence J(E) / E is the integration kernel
  function get_Gnot_rates(jflux) result(Gnot)
    use prizmo_commons
    implicit none
    real*8,intent(in)::jflux(nphoto)
    real*8::Gnot, f1, f2, intf
    real*8,parameter::intf0=1.547d7*hplanck_eV ! J(E)/E intgeral, eV/cm2
    integer::i

    intf = 0d0  ! eV/cm2
    do i=imin_fDraine,imax_fDraine
      f1 = jflux(i) / energy_grid(i)
      f2 = jflux(i+1) / energy_grid(i+1)
      intf = intf + (f1 + f2) / 2d0 * (energy_grid(i+1) - energy_grid(i))
    end do

    Gnot = intf / intf0

  end function get_Gnot_rates

  ! **************************
  ! G0 as the ratio betwenn the current integral of jflux
  ! over the Draine energy interval scaled by the integral of the
  ! corresponding Draine flux (6, 13.6eV)
  ! NOTE: this is classic definition, hence J(E) is the integration kernel
  function get_Gnot(jflux) result(Gnot)
    use prizmo_commons
    implicit none
    real*8,intent(in)::jflux(nphoto)
    real*8::Gnot, f1, f2, intf
    real*8,parameter::intf0=1.33113d8*hplanck_eV ! J(E) intgeral, eV/cm2
    integer::i

    intf = 0d0  ! eV/cm2
    do i=imin_fDraine,imax_fDraine
      f1 = jflux(i)
      f2 = jflux(i+1)
      intf = intf + (f1 + f2) / 2d0 * (energy_grid(i+1) - energy_grid(i))
    end do

    Gnot = intf / intf0

  end function get_Gnot

  ! **************************
  ! H2 rate as the ratio betwenn the current integral of jflux
  ! over the Draine energy interval scaled by the integral of the
  ! corresponding Draine flux
  function get_H2_photodissociation_thin(jflux) result(kH2)
    use prizmo_commons
    implicit none
    real*8,intent(in)::jflux(nphoto)
    real*8::kH2

    ! H2 photodissociation rate reference is from Leiden database, ISRF
    ! Gnot factor is normalized with a J(E) / E kernel
    ! https://home.strw.leidenuniv.nl/~ewine/photo/display_h2_ca2bf3f6b7e18a508253e9521510a4b5.html
    kH2 = 5.68d-11 * get_Gnot_rates(jflux(:))  ! 1/s

  end function get_H2_photodissociation_thin

end module prizmo_rates_photo
